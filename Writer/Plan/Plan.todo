Plan:

High-level steps:
	☐ Parse user format (as specified by the google doc) into BookScriptFormat
	☐ PreRender into BookScriptFormat2 which is almost identical but has:
		- page info (list of elements per page instead of just a list of elements)
		- nav info (ex "chapter 3 starts on page 19")
		- no "page"/"turn" commands
		> note: must be something that can be performed on server and client
	- Note: PreRender is done at standard size, not at user's screen resolution (since it's meant to be consistent everywhere)
	Server:
		☐ PreRender to calculate page count
	Client:
		- User clicks a book
		- Request entire original book format
		☐ PreRender
		☐ Init gui
			☐ show navigation
			☐ show favourite/like/other options
			☐ Render front pages
			☐ On page change, render those pages

	Question:
		✔ does everything show up on the same page regardless of resolution [aside from letting the user make the entire book scale larger/smaller] > YES
			- If we have it always show up the same...
				+ Consistent page numbers ("typo on page 5" means something)
					☐ How would this work for single player scroll?
						> Could have page lines with page number at bottom and you just scroll past them? And/or "Page: #" in status bar somewhere
				x May be hard to read on small resolution and/or unnecessarily large on huge screens / cannot customize text size for reading (outside of book scaling)
					> Though you can still switch to 1-page format
				x Consecutive lines may need to be slightly different text size
					> Probably very small/hard to detect
				How would we have it show up the same?:
					☐ PreRender at standard resolution to assign elements to pages (and break them up appropriately). Output will still be in parsed format, but with page & nav structure.
			If we didn't, how would people communicate typos/sections?:
				- Paragraph #s (visibility could be toggled)

	For bookmarks:
		1. Bookmark the top-left visible paragraph

View Options:
	☐ 1. 2-page
	☐ 2. 1-page (but identical to 2-page -- just 1 at a time)
		+ good for mobile
	☐ 3. 1-page-infinite-scroll
		+ good for any screen - no reason not to allow text size adjustment
		- would need page # line divisions
		✔ inconsistency if a book has a lot of text all in one chapter (so a lot of scrolling on one page) followed by a lot of images, each of which are meant to be on a new page
			- could alternatively have infinite scroll on one page (for entire book) a page division strategy of:
				- 1. you see the page immediately [for simple "new page" command]
				x - 2. it is invisible until you scroll down enough? [for chapters / "turn" command]
				- 2b. Just do #1 for both "new page" and "turn" command

Cool idea:
	☐ Rendering is, by default, to a 3D book (though it can be blanked out with a privacy setting, maybe?)
	☐ Pages can therefore turn in 3D! (They should probably tween in size as they do to mimic how you normally curve a page, not have it stand straight out as you turn it)
	☐ You can also read over someone's shoulder and see the title page on the cover
	☐ A book could have a new "Summary" field for the back cover
	
Infinite Scroll:
	☐ Ignore newlines, .Position, and .Size indicated by PreRender (for text elements)
		It may be able to use Position/Size for images, even if it has to adjust the .Y
	☐ Rerender currently visible pages when the resolution changes
	Idea for "1 page infinite scroll" for page divisions that are in the middle of a line (due to adjusted user text size):
		------------------------------------------------- 7
		lots............................................
		of..............................................
		text ...........................................
				---------------------------------------  8
		a little | the rest of some line
		----------
		
		[there would not be extra space between the rows "text" and "a little"]


Terminology:
	Parse (parse original book format into elements)
	PreRender (distribute elements onto pages)
	Render (create gui instances based on the given elements)
	Processing:
		✔	Parse book content
		✔	PreRender at standard resolution and process/break up/deal with elements, assigning them onto pages. Output will include page & nav structure.
	Display:
		✔	(Using current resolution) Create/reuse instances and render the format from the PreRender stage (and of course display it)
		✘	Center the page content vertically so that any lines of empty space won't be so noticeable

Modifications to Parsing:
	✔ Handle '<line>' and '<dline>' and ignore newlines depending on property name [something to do with text wrapping, configured by book data script]

Elements Implemented:
	Prerender:
		✔ Page @done(22-03-05 12:44)
		✔ Turn @done(22-03-05 12:44)
		✔ Text
			✔ add Subscript/Superscript to Format.lua
		✔ Alignment
		✔ Chapter
		✔ Header
		✔ Bar @done(22-03-05 12:44)
		✔ Image
		☐ Box
		☐ Quote
		✔ PageNumberStyle [can specify new numbering and style -- if number not specified, simply continues from before? Or restarts at 1]

	Render:
		✔ Text @done(22-03-20 13:48)
		✔ Alignment
		✔ Chapter
		✔ Header
		✔ Bar @done(22-03-20 13:48)
		✔ Image
		☐ Box
		☐ Quote
		✔ Page number
			✔	pass in the Page object (rather than a list of elements) to get access to :IsLeftPage()

Idea:
	BookScript will still have author/librarian/etc as special variables
	It sends this data to a central Book Processing script
	It creates the intro pages/title page inside the book that contains the full size image, book title, author, author's note, etc.
	It then sends this to the Writer module
	✔ First chapter is *implied* to be the Introduction (ideally name is customizable with some sort of writer config)
	☐ First chapter tag marks the 1st chapter (named "Chapter 1" by default)
	☐ First page is therefore the cover page
		☐ Render can be responsible for displaying an offset
	☐ Processor can also handle PageNumber style -- invisible 1st page



Prerendering:
	List<Element> -> BookContent (contains things like List<Page with elements on it>, NavigationInformation)
	For each element:
		✔ Some commands turn the page
		✔ Figure out the size/if it fits on the current page (or can be split up -- text can)
			✔ If not, advance to next page and put it there
		✔ For certain types of elements, add to navigation information

	Output is BookContent with:
		.PageNumbering:List<PageNumberingEntry> with:
			.StartingPageIndex
			.Style ("RomanNumerals"/"Normal"/"Invisible")
			.StartingNumber (usually 1)
		.Chapters:List<Chapter> with:
			.Name:string? and :GetName() [converts no name to "Chapter 1"]
			.Number
			.StartingPageIndex
		.Pages:List<Page> with:
			.Index -- :IsLeftSidePage() comes from this % 2
			.Elements, a list of ProcessedElement, each of which is much like what Prerendering receives but also contains position & size information
	A full Book has:
		Option 1:
			.Content
			.Title
			.Author
		+ Option 2:
			.Content
			.BookData (points to .Title .Author etc since this info needed by client ahead of time)
	Element -> ProcessedElement:
		✔ Some elements are removed (such as Page/Turn)
		✔ Add .Position and .Size to elements (some, like Alignment, don't have this)
		✔ Text elements are grouped into TextBlock container elements (Rendering can convert each one into a TextLabel)
			✔ Keep track of its size/width and width used on current line (PageSpaceTracker knows size left on current line and so can help with this)
				> Probably easiest to pretend that everything is left aligned when inputting into PageSpaceTracker
			To handle alignment:
				Premise is that the TextBlock is oversized and that the Roblox TextLabel can handle alignment within that size
				✔ Position it based on the top-left of where the text could be if it were left-aligned
				✔ Size it based on maximum available size
				✔ If maximum available width changes from one line to another, you need to start a new TextBlock

ProcessedElements:
	✔	TextBlock
		This can be represented by a single label.
		.Position
		.Size
		.RichText
		.SubOrSuperScript
			✔	if sub/superscript, modify position/size accordingly
		.Elements : list of text elements with .Text and .Format (RichText is the compiled version of these)
		.Alignment : Enum.TextXAlignment


Page Rendering:
	(List<ProcessedElement>, Page:Frame, UserSettings) -> mutate Page/add actual Instances to it
	✔ if we just had a "render" function that only handled text/textblocks:
		✔ for each `element` in `processedElements`:
			✔ make a new `textLabel`
			✔ set its position, size, richtext, etc., based on the properties of `element`
			✔ set the text
			✔ add the `textLabel` to the `Page`

Bookmarks:
	☐ Save chapter # and page # offset from beginning of chapter

Book Processing:
	☐	First page is the cover (a full-size image) or blank, with invisible page numbering
	☐	Second page is title page, with
		"{Title}" (centered header with stroke); make the text NearBlack with the stroke Black
		"By: {author(s)}" (normal, bold, centered, same color/stroke as title)
		"ROBLOX Library Community" (large)
		(remaining is normal, left-aligned)
		"Librarian: {}"
		"Published On: {}"
		"{author's note}"
		{turn page and start normal page numbering}

Gui:
	Navigation handling:
		☐ Support travel to specific chapter (including start of book as "chapter 0" - only called "Introduction" or whatever) or bookmark
		☐ Receive Book with Chapters, user bookmarks
		☐ display options as designed in gui
		on click of a navigation option:
			☐ jump to the page and have it rendered (along with the page on the opposite side, if in 2-page view)
			☐ (if in infinite scroll view, put it at the top of the screen. If user scrolls up, render that page above the one you started with - depending on algorithm chosen this *might* look different than if the user had started with that previous page due to the potential for line merging)