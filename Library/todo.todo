(If you install the Todo+ extension you can toggle a task being done with Alt+d and create a new task with Ctrl+Enter)
--------------------------
Custom Playlist:
	✔ Do not continue work on this feature until Poll confirms whether we need it or not
		Poll Result - a number of people use it, though few would care if they could have more than one
	> need to rewrite "CustomPlaylistDrop" in Menus.client
	> Gui will have "x" to delete entry and then 1+ rows for sound IDs
	> after pressing enter a label with Title (Length) is supposed to show up (maybe "by Creator" as well?)
	On Enter of one of the IDs:
		☐ Validate the input. If it's no good, revert to previous value.
			☐ Tell user what's wrong by sending a notification
			 ( can only do that on the client ) - yup, this is all client code oh ok
			 the server side is Profile (the client Profile is also responsible for transmitting; the Music module tells the client Profile)
		☐ Music:TrySetCustomPlaylistTrack(index, id)
			will return true OR false, reason
			if it fails, tell user why via notification like before
			& revert text box
		☐ If successful, if there is no empty text box, create another row
	On startup:
		☐ Populate the Music list with all the default music (with Name, Length, creator)
		☐ On "+" Activated, copy into new slot in the playlist
	> For now, do not support multiple playlists - most players will only use 1 at most (and not popular feature anyway)
	Currently playing display:
		> In the main menu, or the custom playlist editor
		☐ Create this display
		☐ When the current music changes, activate an event
		☐ When the event fires, update the Currently Playing display

Music:
	✔ bridge between Menus.client and Profile class, supporting...
		✔ :GetEnabled()
		✔ :SetEnabled(enabled)
		✔ :GetActivePlaylistName()
		✔ :SetActivePlaylistName(name)
		✔ :CustomPlaylistHasContent()
		✔ .CustomPlaylistNowExists:Event
		✔ .CustomPlaylistNowEmpty

Teleport:
	☐ Shared teleport code
	☐ ConfirmationBox module (that doesn't know anything about teleport)
	☐ Have teleport scripts use shared teleport code

Bugs:
	✔ Can't toggle Music on/off
	☐ Playlist says "Center" instead of "Default"
	☐ Opening Book Finder doesn't close menu

Profile:
	✔ Algorithm that can handle merging
	> see SaveableSet
	☐ Add Recently Read books to profile
	☐ serialize profile and its contents (ex via SaveableSet) both for over the network and to/from the data store
		☐ for data store only, need to be able to encode with a version so that they can be upgraded over time (or use tables with string keys that we can change over time)
			x if we use string keys to upgrade, then you have to check every possible string key, "just in case"
	☐

New Book Gui:
	For now we can add on to the existing book gui
	☐ favoriting a book
		☐ ImageButton star, like on Roblox's site. Change its icon when the change is confirmed (put it in a grayed out state while saving)
		☐ store it in the user's profile
		☐ store it in the book's list of people who have favourited it using UpdateAsync
	☐ mark book as read/unread
		☐ TextButton that grays out while confirming change; text must change to "Mark as Read"/"Mark as Unread"
		☐ store in user's profile
		☐ store/remove it in book's list of who's read it (UpdateAsync)
	☐ some way to add to "pouch"?
	☐ need to rewrite the BookGui script


--------------------------
Data Flow Plan (Profiles):
--------------------------
OnEnter:
	☐ DataStoreLoad -> profileData
	☐ Profile.Deserialize/Decode -> profile
	☐ profiles[player] = profile
	☐ fire profileLoaded for the player (can be created on demand; only fire if it exists)
	☐ mark when next autosave can occur

User clicks Music Off:
	☐ gui asks Music
	☐ Music gets a ref to the current profile and can check :IsMusicEnabled()
	☐ Music should then react to new value of MusicEnabled
	☐ ClientProfile uses remote to notify server of change
	☐ Server records it and marks profile as changed
	☐ activate autosave routine/queue as needed

User clicks a book:
	☐ book gui asks ClientProfile for fav/read/etc details
	☐ book gui asks BookContent module for content (which keeps it only while the book is in your inventory; maybe also the last book you had opened)
		☐ asks for content from server

Say we use the most basic table syntax (so it's simple to view/edit). What data could be stored in one key?
ex, Favorites=[1,532,531]
so if we assume there are 10k books and that each ID is 4 digits long, then we need 5 digits per favourite is ~50,000 characters and the limit is 260,000 characters!
So we could do that for now