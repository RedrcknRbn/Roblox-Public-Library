 (If you install the Todo+ extension you can toggle a task being done with Alt+d and create a new task with Ctrl+Enter)
--------------------------
Update Book Scripts:
	✔ ListToEnglish -> Module (in Utilities)
	✔ finish fixing BookEventScript to use ListToEnglish for authorLine
	✔ book search needs to know that it's a list of names (comma separated in the StringValue)
	✔ incorporate Pink's fix for Title @done(20-08-27 14:20)
	✔ add faq to new menu system @done(20-08-27 14:36)
	✔ Books now accepts :Register for all books
	Update scripts:
		✔ reimplement how the update script will modify all BookEventScripts
			> plan is in AuthorIDLookupCommand
			✔ get rid of section ending headers (like --Images--)
			✔ are the comments I added suitable?
		✔ BookSearch that uses Books module and book.Author now needs to use book.Authors (a dictionary)
		✔ BooksClient needs updated documentation on what :GetBooks is @started(20-08-28 10:58) @done(20-08-28 11:07) @lasted(9m15s)
		✔ SelectScript must use BooksClient @done(20-08-28 12:09)
		✔ change to AuthorIds (not IDs)
	Genre handling:
		✔ Detect genre in author commands
		Books:Register must:
			✔ normalize genre (lower case, get rid of all spaces and dashes, ex "Sci - Fi" to "scifi")
			✔ convert normalized form to "pleasant" form (ex "scifi" to "Sci-Fi")
		✔ get other genres/aliases (modify revampbooks temporarily to list them) @started(20-08-28 13:23) @done(20-08-28 16:57) @lasted(3h34m48s)
		✔ support genres = {} in BookEventScript
		✔ Locate shelves that are mostly one genre automatically? (determine genre by proximity to others)
		✔ use hall to determine proper genre (Roblox History vs [World] History)
			☐ test this
	Genre Cleanup:
		✔ These books aren't on a shelf, apparently (this can be okay if it's on a special display, but some of them are stuck inside shelves): @done(20-08-30 12:10)
			✔ The last 2 are particularly bad - it implies they don't exist elsewhere (but should!) @done(20-08-30 11:46)
	Genres Update:
		✔ Update genres script
		✔ Update tmpAliases to accomodate for old names
		✔ Remove identified genres from part names
		✔ Tell cod about updating google doc (including "Library Post", "Action", and renaming) @done(20-09-01 11:03)
	Edge Cases:
		✘ make backup of live place @cancelled(20-08-28 10:56)
		✔ leave notice to *not* publish the Library until we're done remaining changes
		✔ go through edge cases (the customAuthorLines and other cases) @started(20-08-28 11:15) @done(20-08-28 11:30) @lasted(15m22s)
	Gui Improvement:
		✔ show FAQ gui on first join @started(20-08-30 12:11) @done(20-08-31 14:15) @lasted(1d2h4m22s)
		✔ save that they've seen it before (as part of profile)
		✔ test in studio
		✔ test online to confirm data stores working
	cod's new guis:
		✔ reorganize
		✔ connect scripting
		FAQ:
			✔ Create entry for each question (dif font for Q than A) @done(20-09-01 11:53)
			✔ Auto separate questions from answers or reformat in About @done(20-09-01 11:53)
		About:
			✔ Preload all floor maps when user opens About
			✔ 	also preload Control images
			✔ Switch between floors on button press (change FloorMap.Image)
			✔ ensure FAQ scrolling is working correctly (call the handler func)
			✔ FAQ needs work
			✔ Credits - scrolling frame
			✔ Controls - use scale
		Music:
			✔ finish merging
			✔ implement next/prev track
			✔ implement pause/play
			✔ delete pause button after storing its details
			✔ bold currently playing track
	Misc:
		✔ rename book scripts to "BookScript" @done(20-09-01 09:09)
		✔ remove all major comment blocks and empty lines @done(20-09-01 14:16)
	Before updating live place:
		Prepare package (shared template) for books:
			✔ Write template
			remove cover/etc from books in:
				✘ command
					> won't need to - we can run maintenance after
				✔ maintenance
				✔ package template
			✔ add them back in in Books.lua
			✔ Make package @done(20-09-02 18:58)
		Efficiency Improvements:
			Book Color:
				✔ remove book color from template
				✔ in template, encourage people to change colour of book part directly @done(20-09-03 11:13)
				✔ update RevampCommand to set book.Color based on BookColor value, then remove the value @done(20-09-03 11:19)
				✔ remove book color from server scripts
				✔ client looks at colour of the book it clicked on to get the 'bookColor'
				✔ Remove titleTextcolor/titleStrokeColor from replication (have client read from them, too)
			Move titleTextColor/titleStrokeColor to direct child of books for easy access:
				✔ in template instructions @done(20-09-03 11:26)
				✔ in RevampCommand @done(20-09-03 11:23)
				✔ update template package
				✔ in MainBookScript

		Maintenance Plugin:
			✔ fetch book title/data/etc
				> needed for report and something else I think
			Id system:
				✔ Assign Ids
				✔ verify 2 dif books don't share the same id!
				✔ Store each id-book pair in ServerStorage and use this to help detect new books
					> This is for if someone manually adds an Id or runs the book maintenance plugin in a different place and then transfers the book
					> This can be stored as a lua table if desired
			✔ Delete unnecessary items
			✔ add these back in books.lua
			✔ Update cover label gui with title (for the sake of those editing)
				> If this will be done reliably, this code can be moved out of Books:Register
			✔ Ensure the book's genre includes the shelf it is on
			✔ Inspect genres
			✔ remove unnecessary welds
			✔ Replace all fancy quotation marks with simple equivalents (in both script source and part name) @done(20-09-02 19:06)
			✔ inspect author ids/names as much as we can from the plugin
			Button to handle changing the source:
				✔ Add button to toolbar @done(20-09-03 11:39)
				✔ Find book from selection @done(20-09-03 11:39)
				✔ If no id, warn instead (since we can't know what id to update) @done(20-09-03 11:40)
				✔ Update copies based on selected book @done(20-09-03 11:39)
		Other:
			✔ Transfer modified book reader gui to scripting dev @done(20-09-03 11:57)
			✔ Package that includes supporting scripts so you can read a book (for workshops)
				✔ In this package, Books.lua should not warn if no id, since no books should have an id
			✔ I want the book script to send 'script.Parent' to :Register, not 'script'
	Maintenance Plugin Bugs:
		✔ Author database not filled out after used/changed
		✔ Author(s) field is sometimes getting book content
		✔ In Book List Report, Genres is "table: 0x092fbdbab27a610f"
		✔ No output from author scan
	Book Search:
		✔ Some books use '’' character. Replace these with a '
	Test/Debug:
		✔ Workshop Package  @done(20-09-03 13:31
		✔ RevampBooksCommand (test on scripting dev; have backup of book folders handy)
		✔ BookMaintenancePlugin (test on offline copy after revamp works)
	Bugs:
		✔ Replacing fancy quotation marks can prematurely end a string
		✔ RevampCommands assumes a certain order that isn't always there, resulting in data loss
		✔ Maintenance should only get rid of special characters for new books
			> It takes .01 sec to perform it for 1 book
		✔ Maintenance should not allow itself to process for more than 1 sec
		☐ customAuthorLine is somehow leaking into authorIds on previously dealt with special cases
		☐ RevampCommands adds genres to individual copies, but not the whole list of them, thereby making BOTM copies inconsistent!
	Final stages:
		☐ Pick BookScript documentation variant and update package (all are different)
			Get an outside reviewer's feedback on which is easiest to understand
		☐ Look for todo, debug, and print messages that shouldn't be there
		☐ Re-enable Roblox LSP for an added check
		✔ Delete Assign Book Ids.lua (it's now part of maintenance plugin)
		☐ Prepare announcement for staff
		☐ Prepare announcement for general server (including new books)
		☐ Add people to credits
	Update Live Place:
		✔ Scan for all authorIds and usernames
		☐ Ask Roblox for id or username corresponding to each one
		☐ Find list of all author ids that have not be on since 2015 and remove them from both collections
		✔ use rojo to update scripts (this will include the new menu system)
		☐ transfer guis and DefaultMusic folder (ReplicatedStorage)
		☐ Replace "paragraphs" with "content"
		Deal with some more special cases:
			☐ The Somewhat Okay Guide to Rogue Lineage (fails to convert authorIds)
				> this might just be a bug
			☐ Gavin (librarian & publishDate switched - librarian not listed)
			✘ The Roblox Zone: Grave Danger (publish date, manually switch day/month to month/day -- rest of librarian's dates are probably month/day/year)
				> not needed
			☐ "No note provided" is in some authorsNotes - remove?
			These scripts assigned to words instead of paragraphs:
				☐ The Living Tree
				☐ Neighboor
				☐ The bunker after the war
		Perform test on offline copy:
			☐ run RevampBooksCommand on offline copy and inspect books
			☐ run maintenance plugin and inspect again
			☐ test menus & books are working
			Make sure nothing breaks:
				☐ Modify book source & Update copies
				☐ Add new book source
				☐ Clone existing book
				☐ Clone existing book and modify story content
		☐ run RevampBooksCommand
		☐ run maintenance plugin
		☐ look in script analysis and fix issues
		Post-transformation special cases:
			☐ clean up "The World Of Scat"'s authorsNote, authorNames, etc
				local authorNames = {"EpicNerd5678", "LostSouth", "Jwarrior999", "AE_FIRE"}
				local authorIDs = {115006960, 171216631, 143589351, 511027312}
				local customAuthorLine = "EpicNerd5678, LostSouth, Jwarrior999, and AE_FIRE (listed as LostArt)"
		☐ final quick test menus & books are working
		☐ publish
		☐ update workshops (use a package for a shared template so updating either not required or easier in future)

		Maintenance Plugin - Feature for the future:
	☐ A button to add in the covers so you can see what the books look like without pressing play
		> It would add everything with Archivable = false so they won't save
		> A 2nd button to remove them

New Book Gui:
	☐ reorganize/redesign from cod's to work on any resolution
	☐ design
	☐ implement

Book Pouch/Inventory:
	Interface:
		✔ Perhaps "Books" or "Inventory" text should be on far left side (rotated 90 degrees), at least when the pouch is closed
		✔ Starts out open (but invisible if you're not carrying any books) @done(20-07-19 12:57)
		✔ A ScrollingFrame (only scrolls if needed) to hold each book @done(20-07-19 12:57)
		☐ It should save books you previously had in your inventory
			This will be automatic when integrated into Profile
		✔ An "x" beside each book to remove it from the inventory @done(20-07-19 12:56)
		✔ When you click on a book in the pouch, it opens up @done(20-07-19 12:56)
	Files Needed:
		> BookPouch in ReplicatedStorage for the class and common behaviour
		> BookPouchServer to handle server-side remotes (to allow client to add/remove books)
		> BookPouchClient and/or BookPouchGui to call those remotes and show the list in the interface
	Integration with Profile:
		☐ Needs BookPouch class with .new/:Serialize/.Deserialize so it can be stored in the data stores and transmitted to the client
		☐ At the end of Profile.server, call InitRemotes on BookPouchServer
	Note:
		We're going to have to rewrite the way books are opened, but in the end there'll be some function where you give it the book id and it opens the book; you could use a dummy function for now (that just prints out the book id)
	Other Tasks:
		☐ BookPouch should store the list of book ids. It can get various information from ReplicatedStorage.BooksClient (this file can be extended if further information is needed)
		☐ BookPouchTests should properly test serialization/deserialization
		☐ When a book is opened, add it to the user's book pouch instance (from profile.BookPouch)
		☐ When a book pouch has something added to it or removed from it, it should trigger some sort of Changed event so that the gui code can update the list
		☐ Optionally, the gui can use ObjectList to maintain a row in the ScrollingFrame for each book in the list
		☐ The client should notify the server whenever a change is made; the server should verify the request (ex Assert.Integer(id)) and appropriately update the book pouch for that player

Books Need Ids:
	✔ ServerScriptService.Books must get the id of each book
	✔ There are IntValues 'Id's stored in each book model

TopBar:
	✔ Credit https://github.com/1ForeverHD/HDAdmin/tree/master/Projects/Topbar%2B for coords/sizes
	✔ Transparency of bg image
	✔ Settings gear (from TopBar+): http://www.roblox.com/asset/?id=2484556379
	Music:
		✔ Get musical note icon
		✔ Create dropdown list
		✔ Make the gui functional
	About or FAQ:
		✔ Get icon (maybe a "?")
		✔ Should have commands/controls and credits
	Book Finder:
		✔ Get magnifying icon

Profile / Music:
	✔ Profile *has* music and can ask Music to serialize/etc
	✔ Music has functions for active playlist/etc instead of Profile
	Server-side Note:
		No need to check whether the profile has changed; it's easier to just assume that it has and autosave regardless

Custom Playlist:
	Bugs:
		✔ View playlist not updated when editing same one
		✔ After deleting a playlist, "+" doesn't create a new one
		✔ After deleting a playlist, the currently active playlist should be reset to the default (if it was the deleted one)
		✔ Switching playlists bug (GetCurSongDesc fails - curMusic[curMusicIndex] is nil)
		✔ If APM music were stored, will it cause an error? Is this handled properly?
	Unfinished:
		✔ Load existing playlists from old data store
	Untested:
		✔ Try temporarily limiting # of playlists and songs to very small to test
		✔ Try loading (from fake data) APM music and make sure it's removed
	Polish:
		✔ Show # of songs beside each playlist name in all views
	Data structure to save:
		✔ Each playlist must have a unique id (per user)
		✔ Must store the "next" playlist id for each user
		✔ All requests/functions should use this id (they currently use the name)
	Checks to perform on server:
		✔ Name must be unique
		✔ Name must get through filtering or be "Custom #%d+"
	For new playlists, server must support either:
		1. Can change the name of a playlist that doesn't exist
		✔ 2. Can create an empty playlist (and maybe even save it?)
	On init:
		✔ Dropdown contains all editable playlists
		✔ Open editor to active custom playlist else any custom playlist else "Custom #1"
	✔ Gui will have "x" to delete entry and then 1+ rows for sound IDs
	✔ after pressing enter a label with Title (Length) is supposed to show up (maybe "by Creator" as well?)
	On Enter of one of the IDs:
		✔ Validate the input. If it's no good, revert to previous value.
			✔ Tell user what's wrong by sending a notification
		✔ Music:TrySetCustomPlaylistTrack(index, id)
			will return true OR false, reason
			if it fails, tell user why via notification like before
			& revert text box
		✔ If successful, if there is no empty text box, create another row
	On startup:
		✔ Populate the Music list with all the default music (with Name, Length, creator)
		✔ On "+" Activated, copy into new slot in the playlist
	> For now, do not support multiple playlists - most players will only use 1 at most (and not popular feature anyway)
	Currently playing display:
		> In the main menu, or the custom playlist editor
		✔ Create this display
		✔ When the current music changes, activate an event
		✔ When the event fires, update the Currently Playing display

Teleport:
	✔ When player touches portal, server tells client to inquire about teleporting to the appropriate ID (with RemoteEvent)
	✔ MessageBox is client only
	☐ Client side handler of remote knows to teleport
	☐ Client keeps track of distance
	☐ When client moves away or presses no/etc, tell the server that they're not interested
	WhirlPlay is working on this
	✔ Shared teleport code
	✔ ConfirmationBox module (that doesn't know anything about teleport)
	✔ Have teleport scripts use shared teleport code
	✔ Automatically fetch place name from id and display it in the model and the confirmation message
	✔ Ensure message isn't triggered multiple times while the player is idling/moving around
	✔ Auto-cancel if the player moves away a certain distance
	✔ If a player declines, don't let the message trigger again until they've moved away at least a bit
	✘ Can we write any tests for this?
		> Can't easily test player



Bugs:
	✔ Can't toggle Music on/off
	✔ Toggling music on/off doesn't actually work
	✔ Playlist says "Center" instead of "Default"
	✔ Playlist label should be init to whatever the user's preference is and updated appropriately
	✔ Opening Book Finder doesn't close menu

Profile:
	✔ Algorithm that can handle merging
	> see SaveableSet
	✔ serialize profile and its contents (ex via SaveableSet) both for over the network and to/from the data store
		✘ for data store only, need to be able to encode with a version so that they can be upgraded over time (or use tables with string keys that we can change over time)
			x if we use string keys to upgrade, then you have to check every possible string key, "just in case"

New Book Gui:
	For now we can add on to the existing book gui
	☐ favoriting a book
		☐ ImageButton star, like on Roblox's site. Change its icon when the change is confirmed (put it in a grayed out state while saving)
		☐ store it in the user's profile
		☐ store it in the book's list of people who have favourited it using UpdateAsync
	☐ mark book as read/unread
		☐ TextButton that grays out while confirming change; text must change to "Mark as Read"/"Mark as Unread"
		☐ store in user's profile
		☐ store/remove it in book's list of who's read it (UpdateAsync)
	☐ some way to add to "pouch"
	☐ need to rewrite the BookGui script

Consider these assets:
	Star = "rbxassetid://706790939"
	StarOutline = "rbxassetid://706767490"
	StarWithBorder = "rbxassetid://706767649"

--------------------------
Data Flow Plan (Profiles):
--------------------------
OnEnter:
	☐ DataStoreLoad -> profileData
	☐ Profile.Deserialize/Decode -> profile
	☐ profiles[player] = profile
	☐ fire profileLoaded for the player (can be created on demand; only fire if it exists)
	☐ mark when next autosave can occur

User clicks Music Off:
	✔ gui asks Music
	✔ Music gets a ref to the current profile and can check :IsMusicEnabled()
	✔ Music should then react to new value of MusicEnabled
	✔ ClientProfile uses remote to notify server of change
	✔ Server records it and marks profile as changed
	✔ activate autosave routine/queue as needed

User clicks a book:
	☐ book gui asks ClientProfile for fav/read/etc details
	☐ book gui asks BookContent module for content (which keeps it only while the book is in your inventory; maybe also the last book you had opened)
		☐ asks for content from server

Say we use the most basic table syntax (so it's simple to view/edit). What data could be stored in one key?
ex, Favorites=[1,532,531]
so if we assume there are 10k books and that each ID is 4 digits long, then we need 5 digits per favourite is ~50,000 characters and the limit is 260,000 characters!
So we could do that for now

Theme Editor:
	☐
	Bugs:
		☐ Update visual list of themes upon adding or removing
		☐ Remove existing theme rows when closing plugin/widget
		☐ Need to add Undo points after installationM