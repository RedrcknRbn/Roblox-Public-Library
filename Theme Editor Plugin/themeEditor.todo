Theme Editor Todo Document:
---------------------------
Current:
	✔ select theme to look at
		✔ on select it should create one viewport for every part located within the relevant folder name
	✔ ui grid layout will organize them from there :)
	✔ perhaps store which theme is currently being looked at/modified somewhere?
		✔ could be stored within script
		✔ on init, read from Selected Theme and set the theme to that
	✘ Only show add parts button when {you have have parts selected that are in workspace} and {a theme selected} and {at least one part selected that is not in your selected theme}
		Maybe it enables when you select some parts in workspace? it just checks the other stuff after you select a part or parts

New Ideas:
	✔ + beside Parts that has these menu options:
		✔ Add selected parts to theme [disabled if parts are already in this theme]
		✔ Add selected parts to all themes that don't have them [does not add to themes which already contain the part]

	CreatePluginMenu can be used for context menus that pop up at mouse cursor!
	✔ When you right-click a Parts Viewport you open a menu with:
		Rename Part in All Themes
		Rename Part in Workspace
		✔ Test/debug if needed
		✔ Make it obvious when rename is active or cancelled
	✘ When you change the name of multiple parts (in one theme), button(s) appear in the Parts column: apply name changes [to everywhere]
	☐ Add subtle rotation to parts in viewports (maybe on mouse hover or select)?
		Or some other way to show which one you have selected
		☐ Or make background slightly lighter/darker when selected
		☐ and/or modify lighting in viewportframe (if possible)?
		ambient of 163, 163, 163
		lightcolor of 176, 176, 176
		dir of -0.5, -0.5, -2 ?

Idea for Inconsistencies Detected:
	on apply to workspace, startup, and add parts to theme:
		analyze
		start waypoint
		transfer properties to parts
		finish waypoint
	Things that would be handy:
		☐ See the count of "{set of properties} -> # parts in workspace with that set of properties"
		☐ Click on something to see the next part in each category
		☐ Click on something to select all parts of a category (can then perform a mass rename)
		☐ Override for remaining categories and apply to all (reanalyze in case of renames/other changes)
	UI proposal (shows up overtop of entire Theme Editor):
		Applying {Theme Name}: Workspace inconsistencies detected!
		(below in scrolling frame)
		PartName1:
		[ViewportFrame1] Color: (RGB) 		 [Select Next]
		[ (no name)    ] Transparency: 0.5   [Select All (52)]
		[              ] etc (only include things that vary across blocks)
		[Select next] [Select all] Determine placing of select buttons based on style (prefer third column)
		[ViewportFrame2] [Select Next] [Select All (52)]
		etc
		---------seperator between different part names---------
		PartName2:
		etc
		(end of scrolling frame)
		[Cancel] [Override - Apply to All]
		☐ auto-update as names changes (or other property changes) are made
	
	Select Next behavior:
		☐ use linked list to track
			☐ create linked list		

Bug:
	✔ Rename part in themes: doesn't rename part in ViewportFrame until you reselect part

Polish:
	✔ when you change lighting ambient, also change the ambient of all viewport frames (and for partTemplate to affect future viewport frames)
		and run this on startup
	✔ Currently applied theme should say "Reapply to Workspace"
	☐ When you rename a part in a theme, a context menu appears to ask:
		Rename Part in Current Theme (default)
		Rename Part in All Themes [could be default if all themes have 1 part of the old name]
		Rename Part Everywhere

	☐ [Only add this if we find that it could actually be useful] Could support using tags, which could then be configured more easily to combine effects.
		ex, one tag could be "wall" (affecting material and color), another "windowGlass", etc, and you could configure each individually just like Parts now.
		There could even be complex rules, like "apply this effect for 'wall's that aren't tagged with 'special'", which might be as simple as naming like so...
			wall !special	-> any part that has wall tag but not special tag
			wall special	-> any part that has both tags
	
	☐ Update code to use Roblox's Theme colours everywhere

Sanity Checks:
	☐ TODO figure these out (some are below)

Plugin functionality:
	✔ make bricks turn color (and other effects)
	☐ individual options per brick (transparency, color, mat, reflectance) - ex, can configure so you only change transparency and color, or only material
		uses default of true for all, but if a part has a bool child with associated name, then use the boolvalue
	✔ ability to change part name (apply to this theme, all themes, and/or workspace, with all three as default)
	✘ If a part is added to/removed from/renamed in one theme while the plugin is running, automatically add/remove/remove it to the others
		✘ If the part is then added externally to the others, remove the duplicate
	✘ If the plugin activates and there are inconsistencies between themes, warn the user about the list of inconsistencies (but keep functioning).
	✔ Automatically delete any duplicates within a theme IF the duplicates are identical
		☐ Log when duplicates are removed?
		☐ If not identical warn user
	☐ Any action taken by the plugin should be undoable
		Use 'undoable' function
		✔ Rename operations
		✔ Create theme
		✔ Adding parts operations
		Roblox will undo in reverse order the changes happened. Consider what happens on deletion of objects:
			ex if you verify an ObjectValue pointing to a folder and you listen to folder.AncestryChanged, then when an undo happens the ObjectValue's value changes before the folder comes back which may mess up verification!
			✔ CurrentTheme.Changed updating
			☐ Check for similar bugs
	Apply theme:
		✔ look inside folder for part names
		✔ cross reference all parts in game for things with that name
		✔ change color and material of folder bricks to match game bricks
	☐ "+" for parts has option "Scan Workspace"
		searches workspace for things with consistent attributes that share the same name
		☐ Do we need to have a different option for "Scan Workspace (add to theme)" vs "Scan Workspace (add to all themes)"
		☐ similar to "Inconsistencies detected" UI
			have a scrollingframe with all the 100% consistent unique names, sorted by # of occurrences
			[viewport frame] [Select Next]
			[  part name   ] [Select All (100)]
			[              ] [Add] [Remove]

			[Add all of above] <-- this would be for all the consistent ones
			----- major separator, then 2nd scrollingframe with the inconsistent ones -----

	☐ AddPartsToTheme(s) buttons:
		☐ Show UI if there are inconsistencies between parts with the same name
		☐ [Polish] Show UI to confirm the addition of eligible descendant parts that aren't explicitly selected


	Theme Categories as Exclusive Things (Idea):
		For instance, you might maintain a set of themes to deal with windows and another set for furniture, etc.
		☐ Probably need to support restricting what the part names apply to -- ex, requiring an ancestor with a particular name
			ex only applying "Chair" category theme parts when there is an ancestor with a name containing "Chair"
		☐ if you maintain different categories of themes, you will usually want to add just all themes of just one category, not all themes!
		☐ should probably then enforce this:
			all themes in a user-defined category *always* have the same list of parts (1 part per name)
				if you add a part to one theme, it automatically adds it to the rest in that category
			themes in different categories may *never* have parts with the same name
				(for instance, if category1 has part "X", no other category may affect a part named "X")
				exception: if the parts always have a different ancestor name filter
					☐ ambiguities could still show up and we'd have to figure out how to handle them (or how to let the user decide *once* how to deal with them)

Initialization for any place:
	✔ Insert a Readme script with instructions (command bar snippets for the user to go through?)
	☐ Writeup a Readme script with instructions

Plugin gui:
	✔ A list to change which theme you're editing (dropdown is a scrolling frame)
		✔ When you click the dropdown or select a theme, the theme in ServerStorage should be selected (so you can easily change the name from the properties window if you wish)
	✔ New Theme button
	✔ A scrolling frame with ViewportFrameForThatPart and PartName overtop of it
		✔ Clicking on the Viewport selects the part in Explorer so you can edit its properties
	✔ Apply to Workspace - applies current theme to workspace and updates "CurrentTheme" (an ObjectValue in Theme Editor folder in ServerStorage)

Theme Editor (in ServerStorage) layout:
	✔ Instructions (disabled script)
	✔ Current Theme:StringValue
	✔ (all other themes, as folders, here)

Overlapping themes (optional):
	☐ Cross reference the different theme folders and if they have the same parts as children they are likely related
	☐ Print any differences that the related themes have to notify user ?